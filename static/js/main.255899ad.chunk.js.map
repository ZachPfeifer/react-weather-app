{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","required","id","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","visible","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.255899ad.chunk.js","sourcesContent":["//rcc\r\nimport React from 'react'\r\n\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-title\">Weather Finder</h1>\r\n    <p className=\"title-desc\">Find out the Weather and Current Conditions</p>\r\n  </div>\r\n\r\n);\r\nexport default Titles\r\n\r\n// export default class Titles extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <h1>Weather Finder</h1>\r\n//         <p>Find out the Weather and Current Conditions</p>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n","import React from 'react'\r\n\r\nconst Form = props => (\r\n  <div >\r\n    <form className=\"input-group mb-3\" onSubmit={props.getWeather} >\r\n      <span>\r\n      </span>\r\n      <input className=\"form-control rounded\" type=\"text\" name=\"city\" placeholder=\"City..\" required />\r\n      <input className=\"form-control rounded\" type=\"text\" name=\"country\" placeholder=\"Country..\" required />\r\n      <div className=\"input-group-append\">\r\n        <button className=\"btn btn-outline-secondary btn-light rounded\" type=\"submit\" id=\"button-addon2\"> Get Weather</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n)\r\n\r\n\r\nexport default Form;\r\n\r\n// export default class Form extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <form onSubmit={this.props.getWeather}>\r\n//           <input type=\"text\" name=\"city\" placeholder=\"City..\" />\r\n//           <input type=\"text\" name=\"country\" placeholder=\"Country..\" />\r\n//           <button type=\"submit\"> Get Weather</button>\r\n//         </form>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n","import React from 'react'\r\n\r\nconst Weather = props => (\r\n  <div className=\"card rounded\">\r\n    <div className=\"card-header\">\r\n      Current Weather:\r\n   </div>\r\n    <ul className=\"list-group list-group-flush\">\r\n      <li className=\"list-group-item\"> {props.city && props && <p> Location: {props.city},  {props.country}</p>}</li>\r\n      <li className=\"list-group-item\">{props.temperature && <p>Temperature: {props.temperature} Â°F</p>}</li>\r\n      <li className=\"list-group-item\">{props.humidity && <p>Humidity: {props.humidity} %</p>\r\n      }</li>\r\n      <li className=\"list-group-item \">{props.description && <p>Conditions: <a className=\"text-uppercase\"> {props.description}</a></p>\r\n      }</li>\r\n    </ul>\r\n\r\n    {/* ERROR CATCH */}\r\n    {props.error && <p>{props.error}</p>}\r\n\r\n  </div>\r\n)\r\n\r\n\r\n//   < div class=\"card\" style = \"width: 18rem;\" >\r\n//     <div class=\"card-header\">\r\n//       Featured\r\n//   </div>\r\n//     <ul class=\"list-group list-group-flush\">\r\n//       <li class=\"list-group-item\">Cras justo odio</li>\r\n//       <li class=\"list-group-item\">Dapibus ac facilisis in</li>\r\n//       <li class=\"list-group-item\">Vestibulum at eros</li>\r\n//     </ul>\r\n// </div >\r\n\r\nexport default Weather\r\n\r\n\r\n// export default class Weather extends Component {\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         {this.props.city && this.props && <p> Location: {this.props.city},  {this.props.country}</p>}\r\n//         {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n//         {this.props.humidity && <p>Humidity: {this.props.humidity}</p >\r\n//         }\r\n//         {this.props.description && <p>Conditions: {this.props.description}</p>\r\n//         }\r\n//         {/* ERROR CATCH */}\r\n//         {this.props.error && <p>{this.props.error}</p>}\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n","import React, { Component } from 'react'\n// import axios from 'axios'\n\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\n\n// const weatherApi = axios.create({\n//   baseURL: \"//bcw-sandbox.herokuapp.com/api/weather\",\n//   timeout: 3000\n// });\n\n//https://home.openweathermap.org/\nconst API_KEY = \"5088cd97d07ca3f530bfeee7f7f08acc\"\n\n\nexport default class App extends Component {\n\n  state = {\n    visible: false,\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n\n\n  //API Fetch/Call\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n\n\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        visible: true,\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })\n\n      //ERROR CATCH\n    } else {\n      this.setState({\n        visible: false,\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please Enter the City and Country\"\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row rounded\">\n                <div className=\"col-5 title\">\n                  <Titles />\n                </div>\n                <div className=\"col-5 weather-form\">\n                  <Form getWeather={this.getWeather}\n                    onClick={() => {\n                      this.setState({ visible: true })\n                    }} />\n\n                  {this.state.visible ? <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  /> : <div> Enter City & Country</div>}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport './App.css';\nimport App from './App';\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}